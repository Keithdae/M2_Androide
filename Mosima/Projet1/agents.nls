;-------------;
;   AGENTS    ;
;-------------;

to calculateProfits
  ask agents [
    if partner != -1[      
      set profit (5 * sqrt(effort + otherEffort) - (effort * effort))
      set otherProfit (5 * sqrt(effort + otherEffort) - (otherEffort * otherEffort))
      
      set lastProfit profit
      set lastEffort effort
      set lastPartnerEffort otherEffort
      set lastPartnerProfit otherProfit
    ]
  ]
end

;-------------------------------------------------------------------------------------------------------------------------------------------------

to randomMove
  ask agents [
    set direction one-of [0 90 180 270]  ; on tourne aléatoirement
    set heading direction
    
    let occ false
    if patch-ahead 1 != nobody [
      if [occupied?] of patch-ahead 1 = TRUE [  ; on vérifie si le patch devant nous est libre
        set occ TRUE
      ]
    ]
    if not occ [
      set occupied? false  ; patch d'où on part
      fd 1
      set occupied? true   ; patch où l'on arrive
    ]
    set partner -1
  ]
end

;-------------------------------------------------------------------------------------------------------------------------------------------------

to initAgent ; agent procedure
  set otherEffort -1  
  set otherProfit -1  
  set lastEffort -1  
  set lastProfit -1  
  set lastPartnerEffort -1  
  set lastPartnerProfit -1  
  set partner -1
  set effort ((random-float (high-effort - low-effort)) + low-effort)
  if typeAgent = 0 [ ;null effort agent
    set effort low-effort
  ]
  if typeAgent = 5 or typeAgent = 7 [ ;high effort agent
    set effort high-effort
  ]
  if effort > high-effort [set effort high-effort]
  if effort < low-effort [set effort low-effort]
end

;-------------------------------------------------------------------------------------------------------------------------------------------------

to workAgent
  ask agents[
    let deltax 0
    let deltay 0
    let dir direction
    if patch-ahead 1 != nobody [
      ifelse direction = 0[
        set deltay 1
      ]
      [
        ifelse direction = 90[
          set deltax 1 
        ] 
        [
          ifelse direction = 180[
            set deltay -1 
          ] 
          [
            if direction = 270[
              set deltax -1 
            ] 
          ]
        ]
      ] ;definition du x et y 
      if any? agents-at deltax deltay [ ;agent dans la case en face
        let currPartnerEffort -1
        ask agents-at deltax deltay [
          if direction = (dir + 180) mod 360 [ ;si l'agent en face nous regarde, on travaille ensemble
            set partner myself
            set numInt (numInt + 1)
            set currPartnerEffort effort
            ; print(word "effort: " effort)
          ]
        ]
        set otherEffort currPartnerEffort
      ]
    ]
  ]
end

;-------------------------------------------------------------------------------------------------------------------------------------------------

to adaptEffort
  ask agents[
    if typeAgent = 1 [ ;shrinking effort agent
      set effort (lastPartnerEffort / 2)
    ]
    if typeAgent = 2 [ ;replicator agent
      set effort lastPartnerEffort
    ]
    if typeAgent = 3 [ ;rational agent
      let aux (( (- 32) * lastPartnerEffort ^ 3  + 15 * 3 ^ (1 / 2) * (675 - 64 * lastPartnerEffort ^ 3) ^ (1 / 2)  + 675) ^ (1 / 3))
      set effort ((1 / 6) * ( aux / (2 ^ (2 / 3)) + (4 * 2 ^ (2 / 3) * lastPartnerEffort ^ 2) / aux - 2 * lastPartnerEffort))
    ]
    if typeAgent = 4 [ ;profit comparator agent
      if lastPartnerProfit < lastProfit[
        set effort effort * 1.1 
      ]
      if lastPartnerProfit > lastProfit[
        set effort effort * 0.9
      ]
    ]
    if typeAgent = 6 [ ;average rational agent
      
    ]
    if typeAgent = 7 [ ;winner imitator agent
      if lastProfit < lastPartnerProfit [
        set effort lastPartnerEffort 
      ]
    ]
    if typeAgent = 8 [ ;effort comparator agent
      if lastEffort < lastPartnerEffort [
        set effort effort * 1.10
      ]
      if lastEffort > lastPartnerEffort [
        set effort effort * 0.90 
      ]
    ]
    if typeAgent = 9 [ ;averager agent
      set effort ( ( effort + lastPartnerEffort ) / 2 )
    ]
    if effort < low-effort [ set effort low-effort ]
    if effort > high-effort [ set effort high-effort ]
  ]
end