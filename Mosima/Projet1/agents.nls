;-------------;
;   AGENTS    ;
;-------------;

to calculateProfits
  ask agents [
    set lastProfit profit
    set profit (5 * sqrt(effort + otherEffort) - (effort * effort))
  ]
end

to randomMove
  ask agents [
    set direction one-of [0 90 180 270]  ; on tourne aléatoirement
    set heading direction

    let occ false
    if patch-ahead 1 != nobody [
      if [occupied?] of patch-ahead 1 = TRUE [  ; on vérifie si le patch devant nous est libre
        set occ TRUE
      ]
    ]
    if not occ [
      set occupied? false  ; patch d'où on part
      fd 1
      set occupied? true   ; patch où l'on arrive
    ]
  ]
end

to initAgent ; agent procedure
  set otherEffort -1  
  set otherProfit -1  
  set lastEffort -1  
  set lastProfit -1  
  set lastPartnerEffort -1  
  set lastPartnerProfit -1  
  set effort random-float 2.001
  if typeAgent = 0 [ ;null effort agent
    set effort 0.001 
  ]
  if typeAgent = 5 or typeAgent = 7 [ ;high effort agent
    set effort 2.0
  ]
  if effort > 2.0 [set effort 2.0]
  if effort < 0.001 [set effort 0.001]
end

to workAgent
  ask agents[
     let deltax 0
     let deltay 0
     let dir direction
     if patch-ahead 1 != nobody [
       ifelse direction = 0[
         set deltay 1
       ]
       [
         ifelse direction = 90[
           set deltax 1 
         ] 
         [
           ifelse direction = 180[
             set deltay -1 
           ] 
           [
             if direction = 270[
               set deltax -1 
             ] 
           ]
         ]
       ] ;definition du x et y 
       if any? agents-at deltax deltay [ ;agent dans la case en face
         let currPartnerEffort -1
         ask agents-at deltax deltay [
           if direction = (dir + 180) mod 360 [ ;si l'agent en face nous regarde, on travaille ensemble
             if typeAgent = 0 [ ;null effort agent
               set effort 0.001 
             ]
             if typeAgent = 1 [ ;shrinking effort agent
               set effort lastPartnerEffort / 2
             ]
             if typeAgent = 2 [ ;replicator agent
               set effort lastPartnerEffort
             ]
             if typeAgent = 3 [ ;rational agent
               
             ]
             if typeAgent = 4 [ ;profit comparator agent
               if lastPartnerProfit < lastProfit[
                 set effort effort * 1.1 
               ]
               if lastPartnerProfit > lastProfit[
                 set effort effort * 0.9
               ]
             ]
             if typeAgent = 5 [ ;high effort agent
               set effort 2.0
             ]
             if typeAgent = 6 [ ;average rational agent
               
             ]
             if typeAgent = 7 [ ;winner imitator agent
               if lastProfit < lastPartnerProfit [
                 set effort lastPartnerEffort 
               ]
             ]
             if typeAgent = 8 [ ;effort comparator agent
               if lastEffort < lastPartnerEffort [
                 set effort effort * 1.10
               ]
               if lastEffort > lastPartnerEffort [
                 set effort effort * 0.90 
               ]
             ]
             if typeAgent = 9 [ ;averager agent
               set effort ( ( effort + lastPartnerEffort ) / 2 )
             ]
             
             if effort < 0.001 [ set effort 0.001]
             set currPartnerEffort effort
             ; print(word "effort: " effort)
           ]
         ]
         if currPartnerEffort > -1 [
           set lastPartnerEffort currPartnerEffort
         ]
       ] 
     ]
  ]
end