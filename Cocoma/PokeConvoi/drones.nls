;**********************
;        Drones
;**********************
to setup-drones
  
  ; piste de decollage
  let base-min-pxcor min [pxcor] of (patches with [base? and pzcor = mapAlt])
  let base-max-pxcor ( base-min-pxcor + 1 )
  let base-min-pycor min [pycor] of (patches with [base? and pzcor = mapAlt])
  let base-max-pycor max [pycor] of (patches with [base? and pzcor = mapAlt]) 
  
  create-drones nb-drones
  ask drones [
    set color violet
    
    let x ((random-float (base-max-pxcor - base-min-pxcor)) + base-min-pxcor)
    let y ((random-float (base-max-pycor - base-min-pycor)) + base-min-pycor)
    setxyz x y solAlt
    
    set pitch 0
    set heading 0
    set roll 0
    
    set munitions drone-nb-munitions
    set fuel drone-fuel
    set dead? false
    set incoming-queue []
    set beliefs []
    set intentions []
    set currentReload drone-reloadRate
    
    set objective nobody
    set backObjective one-of patches with [base?] 
    
    add-intention "drone-takeOff" "drone-hasTakenOff"
  ]
  
end


to drones-think 
  ask drones [
    execute-intentions
    if fuel < 0 [
     die 
    ]
  ]
end


to drone-shoot ; drone procedure

  ifelse ( currentReload < drone-reloadRate )
  [
    set currentReload ( currentReload + 1 )
  ]
  ; else
  [
    set shootingTargets ennemis in-radius-nowrap drone-vision
    if any? shootingTargets
    [
      build-shot shootingTargets
      set currentReload 0
    ]
  ] ; ifelse
  
end

to drone-takeOff
  ;; orientation en z
  ifelse zcor < 4.5 [
    if pitch < 45 [
      set pitch ( pitch + 12 )
    ]
  ]
  ; else
  [
    if pitch > 5 [
      set pitch ( pitch - 5 )
    ]
  ]
  
  if (objective != nobody ) [
    let headingFlag (towards-nowrap objective)
    let dirCorrection subtract-headings headingFlag heading
    
    if dirCorrection > 30 [
     set dirCorrection 30 
    ]
    if dirCorrection < -30 [
     set dirCorrection -30 
    ]
    
    set heading ( heading + dirCorrection )
    
  ]
  
  drone-step
end

to-report drone-hasTakenOff
  ifelse zcor >= 5 [
    set pitch 0
    add-intention "drone-escort" "drone-escortDone"
    report true
  ]
  ; else
  [
    report false 
  ]
end

to drone-setObjective [obj]
  ask drones [
   set objective obj 
  ]
end

to drone-moveToObjective
  
  if (objective != nobody ) [
    let headingFlag (towards-nowrap objective)
    let dirCorrection subtract-headings headingFlag heading
    
    if dirCorrection > 15 [
     set dirCorrection 15 
    ]
    if dirCorrection < -15 [
     set dirCorrection -15 
    ]
    
    set heading ( heading + dirCorrection )
    
    let x xcor
    let y ycor
    let diff 0
    
    ask objective [
     set diff  ( abs(xcor - x) + abs(ycor - y) )
    ]
    if diff > 0 [
      drone-step
    ]
  ]
  
end


to drone-spacing 
 let tooClose drones in-cone-nowrap 1 30
 if any? tooClose and ((count tooClose) > 1 or not member? self tooClose)[
   rt random-float 180
 ]
end

to drone-escort 
  drone-moveToObjective
  drone-shoot
  drone-spacing
end

to-report return-cost
  if backObjective != nobody [
    let targetX 0
    let targetY 0
    ask backObjective [
     set targetX pxcor
     set targetY pycor 
    ]
    let deltaX (abs(xcor - targetX))
    let deltaY (abs(ycor - targetY))
    report deltaX + deltaY + 0.1 * drone-fuel
  ]
  
  report -1
end

to-report drone-escortDone
  if fuel < return-cost [
   add-intention "drone-back" "drone-backDone"
   report true 
  ]
  report false
end

to drone-refuel
  ifelse fuel < drone-fuel[
    set fuel fuel + (drone-fuel / 7)
  ]
  ;else
  [
    set fuel drone-fuel
  ]
end

to-report drone-refuelDone
  if fuel = drone-fuel [
   add-intention "drone-takeOff" "drone-hasTakenOff"
   report true 
  ]
  report false
end

to drone-back
  if not [base?] of patch-at 0 0 -1
  [
    ifelse backObjective != nobody [
      let x xcor
      let y ycor 
      let dist -1
      ask backObjective [
        set dist ( sqrt( ((pxcor - x) ^ 2) + ((pycor - y) ^ 2) ) ) 
      ]
      if dist != -1 [
        let headingFlag (towards-nowrap backObjective)
        let dirCorrection subtract-headings headingFlag heading
        
        if dirCorrection > 15 [
          set dirCorrection 15 
        ]
        if dirCorrection < -15 [
          set dirCorrection -15 
        ]
        
        set heading ( heading + dirCorrection )
        if dist < 8
        [
          ifelse zcor > 1.7 [
            if pitch > 315 or pitch = 0 [
              set pitch (pitch - 5)
            ]
          ]
          ; else
          [
            if pitch > 310 and pitch < 355 [
              set pitch (pitch + 5) 
            ] 
          ]
          if zcor <= 1 [
            set pitch 0
            set zcor 1
          ] 
        ]
        drone-step
      ]
    ]  
    ;else
    [
     set backObjective one-of patches with [base?] 
    ]
  ]
end

to-report drone-backDone
  if [base?] of patch-at 0 0 -1 [
    set pitch 0
    set zcor 1
    add-intention "drone-refuel" "drone-refuelDone"
    report true
  ]
  report false
end


to drone-step
  ifelse fuel > 0 [
    
    let nextpx 0
    let nextpy 0
    
    ask patch-at dx dy dz [
      set nextpx pxcor
      set nextpy pycor
    ]
    
    ;if any? other patches in-cone 1.5 90 with [obstacle?]
    
    ifelse abs(pxcor - nextpx) > 1 or abs(pycor - nextpy) > 1[
      rt random-float 90
    ]
    ;else 
    [
      fd drone-speed
      if dz >= 0 [
        set fuel fuel - (abs(dx * drone-speed) + abs(dy * drone-speed) + (abs(dz * drone-speed) * 5))
      ]
    ]
  ]
  ;else
  [
    set fuel 0 
  ]
end